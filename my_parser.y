%{#include <stdio.h>#include <stdlib.h>#include "my_functions.h"%}%union {	struct ast *a;	double d;	struct symbol *s;	struct symbol_list *sl;	int fn;}%token <d> const%token <s> NAME%token EOL NOT%token WHILE DO VAR BEGIN END%nonassoc <fn> CMP%right '='%left '+' '-'%left '*' '/'%left '<' '>' 'E'%nonassoc UMINUS NOT%type <a> operator operators_list assign exp subexp complicated_operator program_wrapper program calculation un_operation bin_operation operand loop_operator compound_operator%type <sl> symlist var_declaration%start program%%program_wrapper: program			{							print_tree($1, 1);							eval($1);						};program: var_declaration calculation 		{$$ = new_ast('P', $1, $2);};var_declaration: VAR symlist 			{$$ = $2;};symlist: NAME 					{$$ = new_symlist($1, NULL);}	| NAME "," symlist 			{$$ = new_symlist($1, $3);};calculation: operators_list			{$$ = $1;};operators_list: operator			{$$ = $1;}	| operator operators_list		{							if ($2 != NULL) {								$$ = new_ast('O', $1, $2);							} else {								$$ = $1;							}						};operator: assign				{$$ = $1;}	| complicated_operator			{$$ = $1;};assign: NAME "=" exp				{$$ = new_assign($1, $3);};exp: un_operation subexp			{$$ = newast($1, $2, NULL);}	| subexp				{$$ = $1;};subexp: "(" exp ")"				{$$ = $2;}	| operand				{$$ = $1;}	| subexp bin_operation subexp		{$$ = new_ast($2, $1, $3);};un_operation: "-" %prec UMINUS			{$$ = 'M';}	| NOT 					{$$ = 'n';};bin_operation: '-'				{$$ = '-';}	| '+' 					{$$ = '+';}	| '*'					{$$ = '*';}	| '/'					{$$ = '/';}	| '<'					{$$ = '<';}	| '>'					{$$ = '>';}	| 'E'					{$$ = 'E';};operand: NAME 					{$$ = new_reference($1);}	| const 				{$$ = new_number($1);};complicated_operator: loop_operator		{$$ = $1;}	| compound_operator			{$$ = $1;};loop_operator: WHILE exp DO operator		{$$ = new_flow('W', $2, $4);};compound_operator: BEGIN operators_list END	{$$ = $2;};%%